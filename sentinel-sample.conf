# Example sentinel.conf

# 默认情况下，在哨兵模式下，保护模式是禁用的。可以从不同于本地主机的接口访问哨兵。
# 确保哨兵实例通过防火墙或其他方式受到保护，不受外界影响。
protected-mode no

# port <sentinel-port>
# 该 sentinel 实例将在其上运行的端口
port 26379

# 默认情况下，Redis Sentinel 不作为守护进程运行。如果需要，请使用“yes”。
# 请注意，当 Redis 以守护进程形式运行时，它会在 /var/run/redis-sentinel.pid 中写入一个 pid 文件。
daemonize no

# 当以守护进程方式运行时，Redis Sentinel 会将 pid 文件写入
# /var/run/redis-sentinel.pid by default. 您可以在此处指定自定义 pid 文件位置。
pidfile /var/run/redis-sentinel.pid

# 指定服务器详细程度。
# This can be one of:
# debug (a lot of information, useful for development/testing)
# verbose (many rarely useful info, but not a mess like the debug level)
# notice (moderately verbose, what you want in production probably)
# warning (only very important / critical messages are logged)
# nothing (nothing is logged)
loglevel notice

# 指定日志文件名。
# 也可以使用空字符串强制 Sentinel 在标准输出上记录。
# 请注意，如果您使用标准输出进行记录但使用守护进程，则日志将发送到 /dev/null
logfile ""

# 要启用系统记录器记录功能，只需将“syslog-enabled”设置为是，并可选择更新其他 syslog 参数以满足您的需要。
# syslog-enabled no

# 指定系统日志身份。
# syslog-ident sentinel

# 指定系统日志工具。必须是 USER 或 LOCAL0-LOCAL7 之间。
# syslog-facility local0

# sentinel announce-ip <ip>
# sentinel announce-port <port>
#
# 上述两个配置指令在由于 NAT 而可以通过非本地地址从外部访问 Sentinel 的环境中很有用。
#
# When announce-ip is provided, the Sentinel will claim the specified IP address
# in HELLO messages used to gossip its presence, instead of auto-detecting the
# local address as it usually does.
#
# Similarly when announce-port is provided and is valid and non-zero, Sentinel
# will announce the specified TCP port.
#
# The two options don't need to be used together, if only announce-ip is
# provided, the Sentinel will announce the specified IP and the server port
# as specified by the "port" option. If only announce-port is provided, the
# Sentinel will announce the auto-detected local IP and the specified port.
#
# Example:
#
# sentinel announce-ip 1.2.3.4

# dir <working-directory>
# 每个长时间运行的进程都应该有一个明确定义的工作目录。
# 对于 Redis Sentinel 来说，在启动时将目录更改为 /tmp 是最简单的方法，这样进程就不会干扰诸如卸载文件系统之类的管理任务。
dir /tmp

# sentinel monitor <master-name> <ip> <redis-port> <quorum>
#
# 1.告诉 Sentinel 监视该主机，并且只有当至少 <quorum> 个 Sentinel 同意时才将其视为 O_DOWN（客观关闭）状态。
#
# 2.请注意，无论 O_DOWN 法定人数(quorum)是多少，Sentinel 都需要由大多数已知 Sentinel 选出才能启动故障转移，因此少数人无法执行故障转移。
#
# 3.副本是自动发现的，因此您无需以任何方式指定副本。
#   Sentinel 本身将使用其他配置选项重写此配置文件，添加副本。另请注意，当副本升级为主服务器时，配置文件会被重写。
#
# Note: 主名称不应包含特殊字符或空格。有效的字符集为 A-z 0-9 和三个字符“.-_”。
sentinel monitor mymaster 127.0.0.1 6379 2

# 1.设置用于与主服务器和副本服务器进行身份验证的密码。如果在要监控的 Redis 实例中设置了密码，则很有用。
# 2.请注意，主密码也用于副本，因此，如果您希望使用 Sentinel 监视这些实例，则无法在主实例和副本实例中设置不同的密码。
# 3.但是，您可以将未启用身份验证的 Redis 实例与需要身份验证的 Redis 实例混合使用（只要所有需要密码的实例的密码设置相同），
#   因为 AUTH 命令在关闭身份验证的 Redis 实例中将不起作用。
#
# sentinel auth-pass <master-name> <password>
# sentinel auth-user <master-name> <username>
#
# 这对于对具有 ACL 功能的实例（即运行 Redis 6.0 或更高版本的实例）进行身份验证非常有用。
# 当仅提供 auth-pass 时，Sentinel 实例将使用旧的“AUTH <pass>”方法对 Redis 进行身份验证。
# 当还提供用户名时，它将使用“AUTH <user> <pass>”。在 Redis 服务器端，ACL 仅提供对 Sentinel 实例的最低限度访问权限，应按以下方式配置：
#
#     user sentinel-user >somepassword +client +subscribe +publish \
#                        +ping +info +multi +slaveof +config +client +exec on

# **
# sentinel down-after-milliseconds <master-name> <milliseconds>
#
# 将redis-master redis-slave sentinel 置为主观下线的超时时间
# 主服务器（或任何附加的副本服务器或哨兵服务器）应处于不可达状态（即，在指定时间内连续无法对 PING 做出可接受的回复）的毫秒数，以便将其视为 S_DOWN 状态（主观关闭）。
#
# Default is 30 seconds.
sentinel down-after-milliseconds mymaster 30000

# IMPORTANT NOTE: starting with Redis 6.2 ACL capability is supported for
# Sentinel mode, please refer to the Redis website https://redis.io/topics/acl
# for more details.

# Sentinel's ACL users are defined in the following format:
#
#   user <username> ... acl rules ...
#
# For example:
#
#   user worker +@admin +@connection ~* on >ffa9203c493aa99
#
# For more information about ACL configuration please refer to the Redis
# website at https://redis.io/topics/acl and redis server configuration 
# template redis.conf.

# ACL LOG
#
# The ACL Log tracks failed commands and authentication events associated
# with ACLs. The ACL Log is useful to troubleshoot failed commands blocked 
# by ACLs. The ACL Log is stored in memory. You can reclaim memory with 
# ACL LOG RESET. Define the maximum entry length of the ACL Log below.
acllog-max-len 128

# Using an external ACL file
#
# Instead of configuring users here in this file, it is possible to use
# a stand-alone file just listing users. The two methods cannot be mixed:
# if you configure users here and at the same time you activate the external
# ACL file, the server will refuse to start.
#
# The format of the external ACL user file is exactly the same as the
# format that is used inside redis.conf to describe users.
#
# aclfile /etc/redis/sentinel-users.acl

# requirepass <password>
#
# You can configure Sentinel itself to require a password, however when doing
# so Sentinel will try to authenticate with the same password to all the
# other Sentinels. So you need to configure all your Sentinels in a given
# group with the same "requirepass" password. Check the following documentation
# for more info: https://redis.io/topics/sentinel
#
# IMPORTANT NOTE: starting with Redis 6.2 "requirepass" is a compatibility
# layer on top of the ACL system. The option effect will be just setting
# the password for the default user. Clients will still authenticate using
# AUTH <password> as usually, or more explicitly with AUTH default <password>
# if they follow the new protocol: both will work.
#
# New config files are advised to use separate authentication control for
# incoming connections (via ACL), and for outgoing connections (via
# sentinel-user and sentinel-pass) 
#
# The requirepass is not compatible with aclfile option and the ACL LOAD
# command, these will cause requirepass to be ignored.

# sentinel sentinel-user <username>
#
# You can configure Sentinel to authenticate with other Sentinels with specific
# user name. 

# sentinel sentinel-pass <password>
#
# The password for Sentinel to authenticate with other Sentinels. If sentinel-user
# is not configured, Sentinel will use 'default' user with sentinel-pass to authenticate.

# sentinel parallel-syncs <master-name> <numreplicas>
#
# How many replicas we can reconfigure to point to the new replica simultaneously
# during the failover. Use a low number if you use the replicas to serve query
# to avoid that all the replicas will be unreachable at about the same
# time while performing the synchronization with the master.
sentinel parallel-syncs mymaster 1

# sentinel failover-timeout <master-name> <milliseconds>
#
# Specifies the failover timeout in milliseconds. It is used in many ways:
#
# - The time needed to re-start a failover after a previous failover was
#   already tried against the same master by a given Sentinel, is two
#   times the failover timeout.
#
# - The time needed for a replica replicating to a wrong master according
#   to a Sentinel current configuration, to be forced to replicate
#   with the right master, is exactly the failover timeout (counting since
#   the moment a Sentinel detected the misconfiguration).
#
# - The time needed to cancel a failover that is already in progress but
#   did not produced any configuration change (SLAVEOF NO ONE yet not
#   acknowledged by the promoted replica).
#
# - The maximum time a failover in progress waits for all the replicas to be
#   reconfigured as replicas of the new master. However even after this time
#   the replicas will be reconfigured by the Sentinels anyway, but not with
#   the exact parallel-syncs progression as specified.
#
# Default is 3 minutes.
sentinel failover-timeout mymaster 180000

# SCRIPTS EXECUTION
#
# sentinel notification-script and sentinel reconfig-script are used in order
# to configure scripts that are called to notify the system administrator
# or to reconfigure clients after a failover. The scripts are executed
# with the following rules for error handling:
#
# If script exits with "1" the execution is retried later (up to a maximum
# number of times currently set to 10).
#
# If script exits with "2" (or an higher value) the script execution is
# not retried.
#
# If script terminates because it receives a signal the behavior is the same
# as exit code 1.
#
# A script has a maximum running time of 60 seconds. After this limit is
# reached the script is terminated with a SIGKILL and the execution retried.

# NOTIFICATION SCRIPT
#
# sentinel notification-script <master-name> <script-path>
# 
# Call the specified notification script for any sentinel event that is
# generated in the WARNING level (for instance -sdown, -odown, and so forth).
# This script should notify the system administrator via email, SMS, or any
# other messaging system, that there is something wrong with the monitored
# Redis systems.
#
# The script is called with just two arguments: the first is the event type
# and the second the event description.
#
# The script must exist and be executable in order for sentinel to start if
# this option is provided.
#
# Example:
#
# sentinel notification-script mymaster /var/redis/notify.sh

# CLIENTS RECONFIGURATION SCRIPT
#
# sentinel client-reconfig-script <master-name> <script-path>
#
# When the master changed because of a failover a script can be called in
# order to perform application-specific tasks to notify the clients that the
# configuration has changed and the master is at a different address.
# 
# The following arguments are passed to the script:
#
# <master-name> <role> <state> <from-ip> <from-port> <to-ip> <to-port>
#
# <state> is currently always "start"
# <role> is either "leader" or "observer"
# 
# The arguments from-ip, from-port, to-ip, to-port are used to communicate
# the old address of the master and the new address of the elected replica
# (now a master).
#
# This script should be resistant to multiple invocations.
#
# Example:
#
# sentinel client-reconfig-script mymaster /var/redis/reconfig.sh

# SECURITY
#
# By default SENTINEL SET will not be able to change the notification-script
# and client-reconfig-script at runtime. This avoids a trivial security issue
# where clients can set the script to anything and trigger a failover in order
# to get the program executed.

sentinel deny-scripts-reconfig yes

# REDIS COMMANDS RENAMING (DEPRECATED)
#
# WARNING: avoid using this option if possible, instead use ACLs.
#
# Sometimes the Redis server has certain commands, that are needed for Sentinel
# to work correctly, renamed to unguessable strings. This is often the case
# of CONFIG and SLAVEOF in the context of providers that provide Redis as
# a service, and don't want the customers to reconfigure the instances outside
# of the administration console.
#
# In such case it is possible to tell Sentinel to use different command names
# instead of the normal ones. For example if the master "mymaster", and the
# associated replicas, have "CONFIG" all renamed to "GUESSME", I could use:
#
# SENTINEL rename-command mymaster CONFIG GUESSME
#
# After such configuration is set, every time Sentinel would use CONFIG it will
# use GUESSME instead. Note that there is no actual need to respect the command
# case, so writing "config guessme" is the same in the example above.
#
# SENTINEL SET can also be used in order to perform this configuration at runtime.
#
# In order to set a command back to its original name (undo the renaming), it
# is possible to just rename a command to itself:
#
# SENTINEL rename-command mymaster CONFIG CONFIG

# HOSTNAMES SUPPORT
#
# Normally Sentinel uses only IP addresses and requires SENTINEL MONITOR
# to specify an IP address. Also, it requires the Redis replica-announce-ip
# keyword to specify only IP addresses.
#
# You may enable hostnames support by enabling resolve-hostnames. Note
# that you must make sure your DNS is configured properly and that DNS
# resolution does not introduce very long delays.
#
SENTINEL resolve-hostnames no

# When resolve-hostnames is enabled, Sentinel still uses IP addresses
# when exposing instances to users, configuration files, etc. If you want
# to retain the hostnames when announced, enable announce-hostnames below.
#
SENTINEL announce-hostnames no

# When master_reboot_down_after_period is set to 0, Sentinel does not fail over
# when receiving a -LOADING response from a master. This was the only supported
# behavior before version 7.0.
#
# Otherwise, Sentinel will use this value as the time (in ms) it is willing to
# accept a -LOADING response after a master has been rebooted, before failing
# over.

SENTINEL master-reboot-down-after-period mymaster 0
